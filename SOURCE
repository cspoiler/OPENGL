// ###################################################################################
// Starting of the Sutherland Hodgeman Algorithm: Actual code for clipping starts here

const int MAXIMUM_POINTS = 30;

// Returns x-value of point of intersection of two
// lines
float x_value_intersection(float x1, float y1, float x2, float y2,
	float x3, float y3, float x4, float y4)
{
	float numerator = (x1 * y2 - y1 * x2) * (x3 - x4) -
		(x1 - x2) * (x3 * y4 - y3 * x4);
	float denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
	return numerator / denominator;
}

// Returns y-value of point of intersection of
// two lines
float y_value_intersection(float x1, int y1, float x2, float y2,
	float x3, float y3, float x4, float y4)
{
	float numerator = (x1 * y2 - y1 * x2) * (y3 - y4) -
		(y1 - y2) * (x3 * y4 - y3 * x4);
	float denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
	return numerator / denominator;
}

// This functions clips all the edges w.r.t one clip
// edge of clipping area
void clip(float poly_points[][2], int &poly_size,
	int x1, int y1, int x2, int y2)
{
	int new_points[MAXIMUM_POINTS][2];
	int new_poly_size = 0;

	// (ix,iy),(kx,ky) are the co-ordinate values of
	// the points
	for (int i = 0; i < poly_size; i++)
	{
		// i and k form a line in polygon
		int k = (i + 1) % poly_size;
		int ix = poly_points[i][0], iy = poly_points[i][1];
		int kx = poly_points[k][0], ky = poly_points[k][1];

		// Calculating position of first point
		// w.r.t. clipper line
		int initial_pos = (x2 - x1) * (iy - y1) - (y2 - y1) * (ix - x1);

		// Calculating position of second point
		// w.r.t. clipper line
		int final_pos = (x2 - x1) * (ky - y1) - (y2 - y1) * (kx - x1);

		// Case 1 : When both points are inside
		if (initial_pos < 0 && final_pos < 0)
		{
			//Only second point is added
			new_points[new_poly_size][0] = kx;
			new_points[new_poly_size][1] = ky;
			new_poly_size++;
		}

		// Case 2: When only first point is outside
		else if (initial_pos >= 0 && final_pos < 0)
		{
			// Point of intersection with edge
			// and the second point is added
			new_points[new_poly_size][0] = x_value_intersection(x1,
				y1, x2, y2, ix, iy, kx, ky);
			new_points[new_poly_size][1] = y_value_intersection(x1,
				y1, x2, y2, ix, iy, kx, ky);
			new_poly_size++;

			new_points[new_poly_size][0] = kx;
			new_points[new_poly_size][1] = ky;
			new_poly_size++;
		}

		// Case 3: When only second point is outside
		else if (initial_pos < 0 && final_pos >= 0)
		{
			//Only point of intersection with edge is added
			new_points[new_poly_size][0] = x_value_intersection(x1,
				y1, x2, y2, ix, iy, kx, ky);
			new_points[new_poly_size][1] = y_value_intersection(x1,
				y1, x2, y2, ix, iy, kx, ky);
			new_poly_size++;
		}

		// Case 4: When both points are outside
		else
		{
			//No points are added
		}
	}

	// Copying new points into original array
	// and changing the no. of vertices
	poly_size = new_poly_size;
	for (int i = 0; i < poly_size; i++)
	{
		poly_points[i][0] = new_points[i][0];
		poly_points[i][1] = new_points[i][1];
	}
}

std::vector<Poly> suthHodgClip(std::vector<Poly> polygons, int polygonSize, std::vector<Rect> rectangles)
{
	//vector<vector<float>> poly_points;
	int size1 = polygonSize;
	float poly_points[MAXIMUM_POINTS][2];
	
	std::cout << "\nThe vertices of polygon are: " << endl;
	for (int i = 0; i < polygonSize; i++) {
		//poly_points.push_back({ polygons[i].x1, polygons[i].y1 });
		poly_points[i][0] = polygons[i].x1;
		poly_points[i][1] = polygons[i].y1;
		 cout <<"X= " << polygons[i].x1 << ", " << "Y= " << polygons[i].y1 << std::endl;
	}

	float clipper_points[][2] = { {rectangles[0].x1, rectangles[0].y2}, 
		{rectangles[0].x1, rectangles[0].y1},
		{rectangles[0].x2, rectangles[0].y1} , 
		{rectangles[0].x2, rectangles[0].y2}
		 };

	//i and k are two consecutive indexes
	for (int i = 0; i < 4; i++)
	{
		int k = (i + 1) % 4;

		// We pass the current array of vertices, it's size
		// and the end points of the selected clipper line
		clip(poly_points, polygonSize, clipper_points[i][0],
			clipper_points[i][1], clipper_points[k][0],
			clipper_points[k][1]);
	}

	std::vector<Poly> temp;
	polygons = temp;

	cout << "The vertices of Polygon After Clipping: " << endl;
	for (int i = 0; i < polygonSize; i++) {
		int k = (i + 1) % polygonSize;
		polygons.push_back(Poly(poly_points[i][0], poly_points[i][1], poly_points[k][0], poly_points[k][1]));
		cout << "X= " << poly_points[i][0] << ", " << "Y= " << poly_points[i][1] << endl;
	}
	return polygons;
}

// And Ends here
// ###################################################################################################
